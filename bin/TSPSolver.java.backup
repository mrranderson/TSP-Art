/*
Filename: TSPSolver.java
Author: Sam Prestwood
Last Updated: 2014-03-29
Abstract: Given a set of points, approximates an efficient path to visit all of 
 them
 */

// imports:
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.awt.Point;

public class TSPSolver {
	
	// constants:
	public static TSPNode DUMMY = new TSPNode(new Point(-1, -1), -1);
	
	// fields:
	private ArrayList<Point> points;
	//private ArrayList<TSPNode> points;
	//private TSPNode path;

	// Class constructor, creats a list of points to visit from the dithered
	// image matrix (for now, assume that the dithered image is only B/W)
	public TSPSolver(int[][] ditheredImgBW) {
		//points = new ArrayList<TSPNode>();
		points = new ArrayList<Point>();
		for (int y = 0; y < ditheredImgBW.length; y++)
			for (int x = 0; x < ditheredImgBW[y].length; x++)
				if (ditheredImgBW[y][x] == 0)
					points.add(new Point(x, y));
					//points.add(new TSPNode(new Point(x, y), x + 
					//		ditheredImgBW.length*y));
	}
	/*
	public void createPath() {
		while(points.size() > 2){
			// find closest pair of points in 'points':
			System.out.println("Finding closest pair of points; set size = " +
					points.size());
			TSPNode start = points.get(0);
			TSPNode end = points.get(1);
			for (int i = 0; i < points.size(); i++) 
				for (int j = i+1; j < points.size(); j++) {
					TSPNode p1 = points.get(i);
					TSPNode p2 = points.get(j);
					if ((p1.getIndex() != p2.getIndex()) &&
						(p1.getPoint().distance(p2.getPoint()) 
							< start.getPoint().distance(end.getPoint()))) {
						start = points.get(i);
						end = points.get(j);
					}
				}
			System.out.println("p1 = " + start.getPoint() + ", p2 = " + 
				end.getPoint() + ", dist = " +
				start.getPoint().distance(end.getPoint()));
			
			// Make an edge between these points:
			System.out.println("Making an edge between " + start.getPoint() + 
					" and " + end.getPoint());
			start.addEdge(end);
			
			// If either of these points now has two edges connecting to them, 
			// remove that point from the set
			if(start.numEdges() > 1)
				points.remove(start);
			if(end.numEdges() > 1)
				points.remove(end);
		}
		
		// make dummy node so getNext will work on the first node:
		path = points.get(0);
		path.addEdge(DUMMY);
		
	}
	
	public TSPNode getPath(){
		return path;
	}
	*/
	public Stack<Point> createPathClosestNeighbor() {
		Stack<Point> result = new Stack<Point>();
		
		LinkedList<Point> blah;
				
		// randomly choose starting point:
		Point start = points.get((int)(Math.random() * (double)points.size()));
		result.push(start);
		
		int startSize = points.size();
		
		while(points.size() > 0) {
			points.remove(start);
			
			// find closest point to start
			int closestPoint = 0;
			for(int i = 1; i < points.size(); i++)
				if(start.distance(points.get(i)) < 
				   start.distance(points.get(closestPoint)))
					closestPoint = i;
			
			start = points.get(closestPoint);
			result.push(points.get(closestPoint));
			points.remove(closestPoint);
			
			
			System.out.println( (startSize - points.size()) + " of " + 
				startSize + " points computed");
		}
		return result;
	}

	/*
	 1. Add all points from the converted image into set S 
	 2. Find the closest pair of points in S 
	 3. Make an edge between these points 
	 4. If either of these points now has two edges connecting to them, remove 
	 that point from the set 
	 5. If S has more than 2 points, go back to step 2, otherwise you're done.
	 */
}
